# Top-most EditorConfig file
root = true

# Apply to all files
[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space
indent_size = 4

# C# files
[*.cs]
# Indentation and spacing
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_between_query_expression_clauses = true
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# New line preferences
csharp_new_line_at_end_of_file = true
csharp_new_line_before_open_brace = true

# Language keywords / Modifiers
csharp_prefer_simple_default_expression = true:suggestion

# Expression preferences
csharp_prefer_conditional_delegate_call = true:suggestion
csharp_prefer_local_over_anonymous_function = true:suggestion
csharp_style_coalesce_expression = true:suggestion
csharp_style_collection_initializer = true:suggestion
csharp_style_conditional_expression_over_assignment = true:suggestion
csharp_style_conditional_expression_over_return = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_constructors = false:suggestion # Prefer full bodies for clarity
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_operators = false:suggestion # Prefer full bodies for clarity
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion # Use new()
csharp_style_interpolated_string = true:suggestion
csharp_style_is_null_check_over_reference_equality_method = true:warning # Use is null / is not null
csharp_style_null_propagation_over_conditional_expression = true:suggestion
csharp_style_object_initializer = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_auto_properties = true:suggestion
csharp_style_prefer_compound_assignment = true:suggestion
csharp_style_prefer_simplified_boolean_expressions = true:warning
csharp_style_prefer_simplified_interpolation = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion # Use switch expressions (C# 8+)
csharp_style_prefer_tuple_swap = true:suggestion       # Use tuple swap `(a, b) = (b, a)` (C# 7+)
csharp_style_throw_expression = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion # Use _ = Method();
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion # Use _ = new Obj();

# 'var' preferences
csharp_style_var_for_built_in_types = false:suggestion # Prefer int, string, etc.
csharp_style_var_when_type_is_apparent = true:suggestion # Use var when RHS makes type clear
csharp_style_var_elsewhere = false:suggestion          # Prefer explicit type otherwise

# Code block preferences
csharp_prefer_braces = true:error # Always use braces {} for if/else/for/while etc.

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
dotnet_style_require_accessibility_modifiers = always:suggestion # Explicitly state public, private etc.
csharp_prefer_static_local_function = true:suggestion

# Using directive preferences
csharp_using_directive_placement = outside_namespace:suggestion
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = true

# Code style enforcement (Roslyn analyzers)
dotnet_style_qualification_for_field = true:suggestion     # Prefer this.fieldName
dotnet_style_qualification_for_property = false:suggestion # Don't require this.PropertyName
dotnet_style_qualification_for_method = false:suggestion   # Don't require this.MethodName
dotnet_style_qualification_for_event = false:suggestion    # Don't require this.EventName
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion # Use int, string not Int32, String
dotnet_style_predefined_type_for_member_access = true:suggestion             # Use int.Parse not Int32.Parse

# Naming conventions
# Interfaces should start with 'I'
dotnet_naming_rule.interface_should_be_pascal_case_with_i_prefix.severity = suggestion
dotnet_naming_rule.interface_should_be_pascal_case_with_i_prefix.symbols = interface
dotnet_naming_rule.interface_should_be_pascal_case_with_i_prefix.style = pascal_case_with_i_prefix
dotnet_naming_style.pascal_case_with_i_prefix.required_prefix = I
dotnet_naming_style.pascal_case_with_i_prefix.capitalization = pascal_case

# Public/Internal members should be PascalCase
dotnet_naming_rule.public_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_members_should_be_pascal_case.symbols = public_symbols
dotnet_naming_rule.public_members_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.public_symbols.applicable_kinds = property, method, field, event, enum, struct, class, delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public, internal, protected, protected_internal
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Static readonly fields should be PascalCase
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

# Private fields should be _camelCase
dotnet_naming_rule.private_fields_should_be_camel_case_with_prefix.severity = suggestion
dotnet_naming_rule.private_fields_should_be_camel_case_with_prefix.symbols = private_fields
dotnet_naming_rule.private_fields_should_be_camel_case_with_prefix.style = camel_case_with_prefix_style
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_style.camel_case_with_prefix_style.required_prefix = _
dotnet_naming_style.camel_case_with_prefix_style.capitalization = camel_case

# Parameters should be camelCase
dotnet_naming_rule.parameters_should_be_camel_case.severity = suggestion
dotnet_naming_rule.parameters_should_be_camel_case.symbols = parameters
dotnet_naming_rule.parameters_should_be_camel_case.style = camel_case_style
dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local variables should be camelCase
dotnet_naming_rule.local_variables_should_be_camel_case.severity = suggestion
dotnet_naming_rule.local_variables_should_be_camel_case.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camel_case.style = camel_case_style
dotnet_naming_symbols.local_variables.applicable_kinds = local

# Async methods should end with Async
dotnet_naming_rule.async_methods_should_end_with_async.severity = suggestion
dotnet_naming_rule.async_methods_should_end_with_async.symbols = public_symbols_async
dotnet_naming_rule.async_methods_should_end_with_async.style = end_in_async_style
dotnet_naming_symbols.public_symbols_async.applicable_kinds = method
dotnet_naming_symbols.public_symbols_async.applicable_accessibilities = public, internal, protected, protected_internal
dotnet_naming_symbols.public_symbols_async.required_modifiers = async
dotnet_naming_style.end_in_async_style.required_suffix = Async
dotnet_naming_style.end_in_async_style.capitalization = pascal_case

# Null checking preferences - Configure severity for NRT warnings/errors
# (Note: Nullable context is enabled/disabled in the .csproj file usually)
dotnet_diagnostic.CS8600.severity = warning # Converting null literal or possible null value to non-nullable type.
dotnet_diagnostic.CS8601.severity = warning # Possible null reference assignment.
dotnet_diagnostic.CS8602.severity = warning # Dereference of a possibly null reference.
dotnet_diagnostic.CS8603.severity = warning # Possible null reference return.
dotnet_diagnostic.CS8604.severity = warning # Possible null reference argument.
dotnet_diagnostic.CS8618.severity = warning # Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
dotnet_diagnostic.CS8625.severity = warning # Cannot convert null literal to non-nullable reference type.
dotnet_diagnostic.CS8765.severity = warning # Nullability of type argument doesn't match overridden member.

# General analyzer diagnostics configuration (can be fine-tuned)
dotnet_analyzer_diagnostic.category-Style.severity = suggestion
dotnet_analyzer_diagnostic.category-CodeQuality.severity = warning
dotnet_analyzer_diagnostic.category-Performance.severity = warning
dotnet_analyzer_diagnostic.category-Usage.severity = warning
dotnet_analyzer_diagnostic.category-Design.severity = suggestion

# File header preferences (Example - adjust as needed)
# file_header_template = unset