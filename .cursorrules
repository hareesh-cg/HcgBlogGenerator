# Project Overview
HcgBlogGenerator is a C# static site generator for blogs and websites, similar to Jekyll. It processes Markdown files with frontmatter, compiles SCSS to CSS, uses configuration files for site structure, and generates static HTML websites. The library is designed to be used in AWS Lambda or Azure Functions to operate on cloud storage.

# Rules
- Use C# 12 features and nullable reference types
- Follow clean architecture principles
- Use dependency injection for all services
- Documentation and comments should be short and explanatory
- Maintain separation of concerns between core functionality and cloud implementations
- Write unit tests for all business logic
- Use async/await for all I/O operations
- Maintain a plugin-based architecture for extensibility
- Follow consistent naming conventions
- Keep the core library independent of cloud specifics

# Personality
- A senior C# developer with expertise in static site generation
- Knowledgeable about modern C# principles and patterns
- Experienced with cloud services (AWS and Azure)
- Values clean, maintainable code with proper separation of concerns
- Prefers explicit and type-safe approaches over dynamic programming
- Focuses on performance and memory efficiency for large sites
- Always considers testability and maintainability

# Important
- Core functionality must work without cloud dependencies
- Performance is crucial for large blog sites
- Template system must be flexible but easy to use
- Plugin system is essential for extensibility
- Configuration should be simple but powerful
- Must handle relative links correctly in generated sites
- Try your best to keep files under 500 lines
- Project Overview (README.md): Refer to the README.md for essential information like the project's purpose, setup guide, basic usage, and contribution process. Ensure any changes affecting these areas are reflected here.
- Planning & Architecture (PLANNING.md): Find details on the project's high-level vision, architectural design, technical constraints, chosen tools, and technology stack in PLANNING.md. Update this document when making significant architectural or planning decisions.
- Task Tracking (TASK.md): Use TASK.md to understand the current development status, including ongoing tasks, the backlog of planned work, and upcoming features. Maintain this file to accurately reflect project progress.

# Tech Stack
- Language: C# 12
- Markdown Processing: Markdig
- Frontmatter Processing: YamlDotNet
- SCSS Compilation: SharpScss
- Template Engine: Scriban
- Configuration: Newtonsoft.Json
- CLI Framework: System.CommandLine
- Logging: Microsoft.Extensions.Logging
- Testing: xUnit, Moq
- Dependency Injection: Microsoft.Extensions.DependencyInjection
- File Operations: System.IO.Abstractions

# Features
## Core Functionality
- Initialize Function: Create a new site with boilerplate files.
- Build Function: Generate the static site from markdown files.
- Draft Support: Manage unpublished content before publishing.
## Content Management
- Markdown Parsing: Convert markdown files into HTML.
- Front Matter: Extract metadata (title, date, tags, etc.) from markdown files.
- Image Optimization: Compress and optimize images for performance.
- Code Syntax Highlighting: Enhance readability for code snippets.
## Blogging Features
- Post Listing with Pagination: Automatically paginate long lists of posts.
- Categories & Tags: Organize blog posts efficiently.
- Search Functionality: Enable keyword-based content search.
- Reading Time Estimation: Display estimated reading time for posts.
- Related Posts: Suggest relevant posts based on content.
- RSS Feed Generation: Automatically generate RSS feeds.
## SEO & Performance
- Meta Tags & Open Graph Tags: Improve search engine and social media visibility.
- Sitemap Generation: Automatically generate XML sitemaps.
- robots.txt: Control search engine indexing.
- Performance Optimization: Ensure fast loading times and efficient rendering.
## UI & Styling
- CSS Modules: Enable modular styling for maintainable CSS.
- Styled Components: Support for component-scoped styles.
## Additional Functionality
- SCSS/SASS compilation
- Templating system with layouts and partials
- Configurable site navigation
- Asset fingerprinting
- SEO optimization
- Plugin system for extensibility
- Cloud-specific implementations for AWS and Azure
- Serve Function in console: Start a local development server, only for testing.

# Project File Structure
HcgBlogGenerator/
├── .github/
│   └── WORKFLOWS/
│       └── build-test.yml						# CI/CD Pipeline
├── docs/
│   └── architecture.md							# High-level architecture overview (Needs update reflecting structure changes)
│   └── usage.md								# How to use the generator
│   └── plugins.md								# Plugin development guide
├── samples/
│   └── new-blog/								# An example blog site source
│       ├── _config.json						# Site configuration
│       ├── _layouts/
│       │   └── default.html
│       ├── _includes/
│       │   └── header.html
│       ├── _posts/
│       │   └── YYYY-MM-DD-my-first-post.md
│       ├── _assets/
│       │   ├── css/
│       │   │   └── main.scss
│       │   └── images/
│       │       └── logo.png
│       ├── index.md
│       └── about.md
├── HcgBlogGenerator.Core/						# Core library: Includes domain, application logic, interfaces, and implementations
│   ├── Interfaces/								# Core abstractions (interfaces)
│   │   ├── IContentProcessor.cs	
│   │   ├── IAssetProcessor.cs	
│   │   ├── ITemplateRenderer.cs	
│   │   ├── IFileSystem.cs						# Using System.IO.Abstractions interface
│   │   ├── IConfigurationLoader.cs	
│   │   ├── IMarkdownParser.cs	
│   │   ├── IFrontMatterParser.cs	
│   │   ├── IScssCompiler.cs	
│   │   ├── ITemplateEngine.cs	
│   │   ├── ILocalWebServer.cs	
│   │   └── IPluginManager.cs	
│   ├── Models/									# Core domain models and related objects
│   │   ├── SiteConfiguration.cs	
│   │   ├── ContentItem.cs						# Base class for pages, posts etc.
│   │   ├── Page.cs	
│   │   ├── Post.cs	
│   │   ├── Layout.cs	
│   │   ├── TemplateData.cs						# Data passed to templates
│   │   ├── Asset.cs	
│   │   ├── PluginContext.cs					# Context object passed to plugins
│   │   └── FrontMatter.cs	
│   ├── Handlers/								# Command Handlers (Application Logic Entry Points)
│   │   ├── InitializeSiteHandler.cs	
│   │   ├── BuildSiteHandler.cs	
│   │   └── ServeSiteHandler.cs	
│   ├── Services/								# Application services & Infrastructure Implementations
│   │   ├── SiteGeneratorService.cs				# Orchestrates the build process
│   │   ├── ContentDiscoveryService.cs			# Finds markdown files, layouts, etc.
│   │   ├── ConfigurationLoader.cs				# Implementation for IConfigurationLoader (using Newtonsoft.Json)
│   │   ├── MarkdownParser.cs					# Implementation for IMarkdownParser (using Markdig)
│   │   ├── FrontMatterParser.cs				# Implementation for IFrontMatterParser (using YamlDotNet)
│   │   ├── ScssCompiler.cs						# Implementation for IScssCompiler (using SharpScss)
│   │   ├── TemplateEngine.cs					# Implementation for ITemplateEngine (using Scriban)
│   │   └── PluginManager.cs					# Implementation for IPluginManager
│   ├── Plugins/								# Plugin API definition & Built-in Plugin Implementations
│   │   ├── Abstractions/	
│   │   │   └── IBuildLifecyclePlugin.cs		# Hooks into build stages interface
│   │   ├── Implementations/         			# Built-in plugin implementations
│   │   │   ├── RssPlugin.cs         			# Generates RSS feed
│   │   │   ├── SeoPlugin.cs         			# Generates SEO tags
│   │   │   ├── SitemapPlugin.cs     			# Generates sitemap.xml
│   │   │   └── RobotsPlugin.cs      			# Generates robots.txt
│   └── HcgBlogGenerator.Core.csproj 			# Dependencies: Markdig, YamlDotNet, SharpScss, Scriban, Newtonsoft.Json, System.IO.Abstractions, M.E.Logging, M.E.DependencyInjection
│	
├── HcgBlogGenerator.ConsoleApp/				# Presentation Layer: Command Line Interface
│   ├── Program.cs								# Entry point, DI setup, command parsing (System.CommandLine)
│   ├── LocalWebServer.cs						# Implementation for ILocalWebServer (e.g., using Kestrel)
│   └── HcgBlogGenerator.ConsoleApp.csproj		# Depends on Core
│	
├── HcgBlogGenerator.AWS/						# Infrastructure: AWS specific implementations
│   ├── Services/	
│   │   ├── S3FileSystem.cs						# Implementation of IFileSystem for S3
│   │   └── CloudWatchLoggerProvider.cs			# LoggerProvider for CloudWatch
│   ├── LambdaHandler.cs						# Entry point for AWS Lambda
│   └── HcgBlogGenerator.AWS.csproj				# Depends on Core, AWSSDK.*
│	
├── HcgBlogGenerator.Azure/						# Infrastructure: Azure specific implementations
│   ├── Services/	
│   │   ├── BlobStorageFileSystem.cs			# Implementation of IFileSystem for Azure Blob
│   │   └── AppInsightsLoggerProvider.cs		# LoggerProvider for App Insights
│   ├── AzureFunctionHandler.cs					# Entry point for Azure Functions
│   └── HcgBlogGenerator.Azure.csproj			# Depends on Core, Azure.*
│	
├── HcgBlogGenerator.Core.Tests/	
│   └── HcgBlogGenerator.Core.Tests.csproj		# Tests for Core logic, uses Moq, System.IO.Abstractions.TestingHelpers
├── HcgBlogGenerator.AWS.Tests/
│   └── HcgBlogGenerator.AWS.Tests.csproj		# Tests for AWS specifics
├── HcgBlogGenerator.Azure.Tests/
│   └── HcgBlogGenerator.Azure.Tests.csproj		# Tests for Azure specifics
│
├── .editorconfig                  				# Code style rules
├── .gitignore                     				# Git ignore file
├── HcgBlogGenerator.sln           				# Visual Studio Solution File
├── LICENSE                        				# License file (e.g., MIT)
├── README.md                      				# Project overview, setup, usage
├── PLANNING.md									# Project planning and execution
└── TASK.md										# List of tasks, that are completed or upcoming in the Project.