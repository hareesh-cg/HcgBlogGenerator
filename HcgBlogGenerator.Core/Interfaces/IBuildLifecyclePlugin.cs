// --- HcgBlogGenerator.Core/Plugins/Abstractions/IBuildLifecyclePlugin.cs ---

using HcgBlogGenerator.Core.Models; // For PluginContext

namespace HcgBlogGenerator.Core.Interfaces;

/// <summary>
/// Defines the interface for plugins that hook into various stages of the site build lifecycle.
/// </summary>
public interface IBuildLifecyclePlugin {
    /// <summary>
    /// Gets the unique name of the plugin. Used for configuration and logging.
    /// </summary>
    string Name { get; }

    /// <summary>
    /// Executes after configuration is loaded but before any content/asset discovery.
    /// Suitable for modifying configuration or setting up initial state.
    /// </summary>
    /// <param name="context">The plugin execution context.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task ExecuteAfterConfigurationLoadedAsync(PluginContext context, CancellationToken cancellationToken) => Task.CompletedTask; // Default empty implementation

    /// <summary>
    /// Executes after content (posts, pages) and assets have been discovered but before they are processed.
    /// Suitable for modifying the discovered lists or adding virtual content/assets.
    /// </summary>
    /// <param name="context">The plugin execution context.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task ExecuteAfterDiscoveryAsync(PluginContext context, CancellationToken cancellationToken) => Task.CompletedTask; // Default empty implementation

    /// <summary>
    /// Executes before individual content items (Markdown files) are rendered to HTML.
    /// Suitable for modifying raw content or front matter before Markdown parsing.
    /// </summary>
    /// <param name="context">The plugin execution context.</param>
    /// <param name="item">The specific content item being processed.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task ExecuteBeforeContentRenderAsync(PluginContext context, ContentItem item, CancellationToken cancellationToken) => Task.CompletedTask; // Default empty implementation

    /// <summary>
    /// Executes after individual content items have been rendered to HTML but before layout application.
    /// Suitable for modifying the generated HTML snippet.
    /// </summary>
    /// <param name="context">The plugin execution context.</param>
    /// <param name="item">The specific content item whose HTML content has just been generated.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task ExecuteAfterContentRenderAsync(PluginContext context, ContentItem item, CancellationToken cancellationToken) => Task.CompletedTask; // Default empty implementation


    /// <summary>
    /// Executes after all content items have been fully rendered (including layouts).
    /// Suitable for post-processing HTML or analyzing final content.
    /// </summary>
    /// <param name="context">The plugin execution context.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task ExecuteAfterAllContentRenderedAsync(PluginContext context, CancellationToken cancellationToken) => Task.CompletedTask; // Default empty implementation


    /// <summary>
    /// Executes after all assets have been processed (e.g., SCSS compiled, files copied).
    /// Suitable for processing assets generated by other plugins or performing final asset tasks.
    /// </summary>
    /// <param name="context">The plugin execution context.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task ExecuteAfterAssetsProcessedAsync(PluginContext context, CancellationToken cancellationToken) => Task.CompletedTask; // Default empty implementation


    /// <summary>
    /// Executes at the very end of the build process, after all files have been written to the output directory.
    /// Suitable for generating summary files, validation, or cleanup.
    /// </summary>
    /// <param name="context">The plugin execution context.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task ExecuteAfterBuildCompleteAsync(PluginContext context, CancellationToken cancellationToken) => Task.CompletedTask; // Default empty implementation
}
